<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.6">
  <compounddef id="classpann_1_1Exception_1_1Base" kind="class" prot="public">
    <compoundname>pann::Exception::Base</compoundname>
    <derivedcompoundref refid="classpann_1_1Exception_1_1ElementExists" prot="public" virt="non-virtual">pann::Exception::ElementExists</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1FilesystemError" prot="public" virt="non-virtual">pann::Exception::FilesystemError</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1MultipleOccurance" prot="public" virt="non-virtual">pann::Exception::MultipleOccurance</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1NotReady" prot="public" virt="non-virtual">pann::Exception::NotReady</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1ObjectNotFound" prot="public" virt="non-virtual">pann::Exception::ObjectNotFound</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1RangeMismatch" prot="public" virt="non-virtual">pann::Exception::RangeMismatch</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1SizeMismatch" prot="public" virt="non-virtual">pann::Exception::SizeMismatch</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1Unbelievable" prot="public" virt="non-virtual">pann::Exception::Unbelievable</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1Warning" prot="public" virt="non-virtual">pann::Exception::Warning</derivedcompoundref>
    <includes refid="Exception_8h" local="no">Exception.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classpann_1_1Exception_1_1Base_13795b9ad6996ac80e80e4e8179b733ab" prot="protected" static="no" mutable="no">
        <type>std::ostringstream</type>
        <definition>std::ostringstream pann::Exception::Base::textStream</definition>
        <argsstring></argsstring>
        <name>textStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/Core/Exception.h" line="23" bodyfile="/home/booble/pann/trunk/src/Core/Exception.h" bodystart="23" bodyend="-1"/>
        <referencedby refid="classpann_1_1Exception_1_1Base_1ad82b3455115377053fa357b70ac7978" compoundref="Exception_8h" startline="48" endline="51">getText</referencedby>
        <referencedby refid="classpann_1_1Exception_1_1Base_139525dbb840db0f93d66bb6cfa0f3089" compoundref="Exception_8h" startline="40" endline="46">operator&lt;&lt;</referencedby>
        <referencedby refid="classpann_1_1Exception_1_1Base_1e73d382790d755edfec2289abe12a626" compoundref="Exception_8h" startline="35" endline="38">text</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_129e2607d6a8c7dc15ed6ed3cb92d3ece" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pann::Exception::Base::Base</definition>
        <argsstring>()</argsstring>
        <name>Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/Core/Exception.h" line="27" bodyfile="/home/booble/pann/trunk/src/Core/Exception.h" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_1659925e8afcb384bc88b2f5b9802e052" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pann::Exception::Base::Base</definition>
        <argsstring>(Base &amp;_rvalue)</argsstring>
        <name>Base</name>
        <param>
          <type><ref refid="classpann_1_1Exception_1_1Base" kindref="compound">Base</ref> &amp;</type>
          <declname>_rvalue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/Core/Exception.h" line="31" bodyfile="/home/booble/pann/trunk/src/Core/Exception.h" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_12b12cae42f85a5d694111d2bb1de315f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual pann::Exception::Base::~Base</definition>
        <argsstring>()</argsstring>
        <name>~Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/Core/Exception.h" line="33" bodyfile="/home/booble/pann/trunk/src/Core/Exception.h" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_1e73d382790d755edfec2289abe12a626" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string pann::Exception::Base::text</definition>
        <argsstring>()</argsstring>
        <name>text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/Core/Exception.h" line="36" bodyfile="/home/booble/pann/trunk/src/Core/Exception.h" bodystart="35" bodyend="38"/>
        <references refid="classpann_1_1Exception_1_1Base_13795b9ad6996ac80e80e4e8179b733ab" compoundref="Exception_8h" startline="23">textStream</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_139525dbb840db0f93d66bb6cfa0f3089" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpann_1_1Exception_1_1Base" kindref="compound">Base</ref> &amp;</type>
        <definition>Base&amp; pann::Exception::Base::operator&lt;&lt;</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/Core/Exception.h" line="41" bodyfile="/home/booble/pann/trunk/src/Core/Exception.h" bodystart="40" bodyend="46"/>
        <references refid="classpann_1_1Exception_1_1Base_13795b9ad6996ac80e80e4e8179b733ab" compoundref="Exception_8h" startline="23">textStream</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_1ad82b3455115377053fa357b70ac7978" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string pann::Exception::Base::getText</definition>
        <argsstring>()</argsstring>
        <name>getText</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/Core/Exception.h" line="49" bodyfile="/home/booble/pann/trunk/src/Core/Exception.h" bodystart="48" bodyend="51"/>
        <references refid="classpann_1_1Exception_1_1Base_13795b9ad6996ac80e80e4e8179b733ab" compoundref="Exception_8h" startline="23">textStream</references>
        <referencedby refid="main_8cpp_10ddf1224851353fc92bfbff6f499fa97" compoundref="main_8cpp" startline="12" endline="39">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic class for every exception. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="13">
        <label>pann::Exception::FilesystemError</label>
        <link refid="classpann_1_1Exception_1_1FilesystemError"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>pann::Exception::SizeMismatch</label>
        <link refid="classpann_1_1Exception_1_1SizeMismatch"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>pann::Exception::Warning</label>
        <link refid="classpann_1_1Exception_1_1Warning"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>pann::Exception::ElementExists</label>
        <link refid="classpann_1_1Exception_1_1ElementExists"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>pann::Exception::MultipleOccurance</label>
        <link refid="classpann_1_1Exception_1_1MultipleOccurance"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>pann::Exception::RangeMismatch</label>
        <link refid="classpann_1_1Exception_1_1RangeMismatch"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>pann::Exception::ObjectNotFound</label>
        <link refid="classpann_1_1Exception_1_1ObjectNotFound"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>pann::Exception::Base</label>
        <link refid="classpann_1_1Exception_1_1Base"/>
      </node>
      <node id="19">
        <label>pann::Exception::Unbelievable</label>
        <link refid="classpann_1_1Exception_1_1Unbelievable"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>pann::Exception::NotReady</label>
        <link refid="classpann_1_1Exception_1_1NotReady"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/booble/pann/trunk/src/Core/Exception.h" line="21" bodyfile="/home/booble/pann/trunk/src/Core/Exception.h" bodystart="20" bodyend="52"/>
    <listofallmembers>
      <member refid="classpann_1_1Exception_1_1Base_129e2607d6a8c7dc15ed6ed3cb92d3ece" prot="public" virt="non-virtual"><scope>pann::Exception::Base</scope><name>Base</name></member>
      <member refid="classpann_1_1Exception_1_1Base_1659925e8afcb384bc88b2f5b9802e052" prot="public" virt="non-virtual"><scope>pann::Exception::Base</scope><name>Base</name></member>
      <member refid="classpann_1_1Exception_1_1Base_1ad82b3455115377053fa357b70ac7978" prot="public" virt="virtual"><scope>pann::Exception::Base</scope><name>getText</name></member>
      <member refid="classpann_1_1Exception_1_1Base_139525dbb840db0f93d66bb6cfa0f3089" prot="public" virt="non-virtual"><scope>pann::Exception::Base</scope><name>operator&lt;&lt;</name></member>
      <member refid="classpann_1_1Exception_1_1Base_1e73d382790d755edfec2289abe12a626" prot="public" virt="non-virtual"><scope>pann::Exception::Base</scope><name>text</name></member>
      <member refid="classpann_1_1Exception_1_1Base_13795b9ad6996ac80e80e4e8179b733ab" prot="protected" virt="non-virtual"><scope>pann::Exception::Base</scope><name>textStream</name></member>
      <member refid="classpann_1_1Exception_1_1Base_12b12cae42f85a5d694111d2bb1de315f" prot="public" virt="virtual"><scope>pann::Exception::Base</scope><name>~Base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
