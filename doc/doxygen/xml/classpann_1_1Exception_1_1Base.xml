<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.6">
  <compounddef id="classpann_1_1Exception_1_1Base" kind="class" prot="public">
    <compoundname>pann::Exception::Base</compoundname>
    <derivedcompoundref refid="classpann_1_1Exception_1_1ElementExists" prot="public" virt="non-virtual">pann::Exception::ElementExists</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1FilesystemError" prot="public" virt="non-virtual">pann::Exception::FilesystemError</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1MultipleOccurance" prot="public" virt="non-virtual">pann::Exception::MultipleOccurance</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1NotReady" prot="public" virt="non-virtual">pann::Exception::NotReady</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1ObjectNotFound" prot="public" virt="non-virtual">pann::Exception::ObjectNotFound</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1RangeMismatch" prot="public" virt="non-virtual">pann::Exception::RangeMismatch</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1SizeMismatch" prot="public" virt="non-virtual">pann::Exception::SizeMismatch</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1Unbelievable" prot="public" virt="non-virtual">pann::Exception::Unbelievable</derivedcompoundref>
    <derivedcompoundref refid="classpann_1_1Exception_1_1Warning" prot="public" virt="non-virtual">pann::Exception::Warning</derivedcompoundref>
    <includes refid="Exception_8h" local="no">Exception.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classpann_1_1Exception_1_1Base_13795b9ad6996ac80e80e4e8179b733ab" prot="protected" static="no" mutable="no">
        <type>std::ostringstream</type>
        <definition>std::ostringstream pann::Exception::Base::textStream</definition>
        <argsstring></argsstring>
        <name>textStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Exception.h" line="37" bodyfile="/home/booble/pann/trunk/src/pann/Core/Exception.h" bodystart="37" bodyend="-1"/>
        <referencedby refid="classpann_1_1Exception_1_1Base_1814afcfe425f55f02e39f1fea05bcbe9" compoundref="Exception_8cpp" startline="23" endline="26">what</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_129e2607d6a8c7dc15ed6ed3cb92d3ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pann::Exception::Base::Base</definition>
        <argsstring>()</argsstring>
        <name>Base</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Exception.h" line="31" bodyfile="/home/booble/pann/trunk/src/pann/Core/Exception.cpp" bodystart="9" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_184c37510b2617297090fb7bbd2520fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pann::Exception::Base::Base</definition>
        <argsstring>(const Base &amp;_rvalue)</argsstring>
        <name>Base</name>
        <param>
          <type>const <ref refid="classpann_1_1Exception_1_1Base" kindref="compound">Base</ref> &amp;</type>
          <declname>_rvalue</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Exception.h" line="32" bodyfile="/home/booble/pann/trunk/src/pann/Core/Exception.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_10ae22e27956edb603976595cda354b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>pann::Exception::Base::~Base</definition>
        <argsstring>()</argsstring>
        <name>~Base</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Exception.h" line="33" bodyfile="/home/booble/pann/trunk/src/pann/Core/Exception.cpp" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Exception_1_1Base_1814afcfe425f55f02e39f1fea05bcbe9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>const char * pann::Exception::Base::what</definition>
        <argsstring>() const </argsstring>
        <name>what</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Exception.h" line="34" bodyfile="/home/booble/pann/trunk/src/pann/Core/Exception.cpp" bodystart="23" bodyend="26"/>
        <references refid="classpann_1_1Exception_1_1Base_13795b9ad6996ac80e80e4e8179b733ab" compoundref="Exception_8h" startline="37">textStream</references>
        <referencedby refid="main_8cpp_10ddf1224851353fc92bfbff6f499fa97" compoundref="main_8cpp" startline="10" endline="37">main</referencedby>
        <referencedby refid="classpann_1_1Exception_1_1Warning_141aa0289bbc946994bdc5c2da647631f" compoundref="Exception_8h" startline="50" endline="53">pann::Exception::Warning::~Warning</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classpann_1_1Exception_1_1Base_1bb7155278e12a8f39270a1fccc505059" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>friend E const &amp;</type>
        <definition>E const&amp; operator&lt;&lt;</definition>
        <argsstring>(E const &amp;_e, const T &amp;_value)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>E const &amp;</type>
          <declname>_e</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>_value</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Exception.h" line="41"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic class for every exception. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="206">
        <label>pann::Exception::FilesystemError</label>
        <link refid="classpann_1_1Exception_1_1FilesystemError"/>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
      <node id="211">
        <label>pann::Exception::SizeMismatch</label>
        <link refid="classpann_1_1Exception_1_1SizeMismatch"/>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
      <node id="213">
        <label>pann::Exception::Warning</label>
        <link refid="classpann_1_1Exception_1_1Warning"/>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
      <node id="205">
        <label>pann::Exception::ElementExists</label>
        <link refid="classpann_1_1Exception_1_1ElementExists"/>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
      <node id="207">
        <label>pann::Exception::MultipleOccurance</label>
        <link refid="classpann_1_1Exception_1_1MultipleOccurance"/>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
      <node id="210">
        <label>pann::Exception::RangeMismatch</label>
        <link refid="classpann_1_1Exception_1_1RangeMismatch"/>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
      <node id="209">
        <label>pann::Exception::ObjectNotFound</label>
        <link refid="classpann_1_1Exception_1_1ObjectNotFound"/>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
      <node id="204">
        <label>pann::Exception::Base</label>
        <link refid="classpann_1_1Exception_1_1Base"/>
      </node>
      <node id="212">
        <label>pann::Exception::Unbelievable</label>
        <link refid="classpann_1_1Exception_1_1Unbelievable"/>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
      <node id="208">
        <label>pann::Exception::NotReady</label>
        <link refid="classpann_1_1Exception_1_1NotReady"/>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/booble/pann/trunk/src/pann/Core/Exception.h" line="29" bodyfile="/home/booble/pann/trunk/src/pann/Core/Exception.h" bodystart="28" bodyend="42"/>
    <listofallmembers>
      <member refid="classpann_1_1Exception_1_1Base_129e2607d6a8c7dc15ed6ed3cb92d3ece" prot="public" virt="non-virtual"><scope>pann::Exception::Base</scope><name>Base</name></member>
      <member refid="classpann_1_1Exception_1_1Base_184c37510b2617297090fb7bbd2520fc8" prot="public" virt="non-virtual"><scope>pann::Exception::Base</scope><name>Base</name></member>
      <member refid="classpann_1_1Exception_1_1Base_1bb7155278e12a8f39270a1fccc505059" prot="private" virt="non-virtual"><scope>pann::Exception::Base</scope><name>operator&lt;&lt;</name></member>
      <member refid="classpann_1_1Exception_1_1Base_13795b9ad6996ac80e80e4e8179b733ab" prot="protected" virt="non-virtual"><scope>pann::Exception::Base</scope><name>textStream</name></member>
      <member refid="classpann_1_1Exception_1_1Base_1814afcfe425f55f02e39f1fea05bcbe9" prot="public" virt="virtual"><scope>pann::Exception::Base</scope><name>what</name></member>
      <member refid="classpann_1_1Exception_1_1Base_10ae22e27956edb603976595cda354b7b" prot="public" virt="virtual"><scope>pann::Exception::Base</scope><name>~Base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
