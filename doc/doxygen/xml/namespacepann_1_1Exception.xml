<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.6">
  <compounddef id="namespacepann_1_1Exception" kind="namespace">
    <compoundname>pann::Exception</compoundname>
    <innerclass refid="classpann_1_1Exception_1_1Base" prot="public">pann::Exception::Base</innerclass>
    <innerclass refid="classpann_1_1Exception_1_1Warning" prot="public">pann::Exception::Warning</innerclass>
    <innerclass refid="classpann_1_1Exception_1_1ObjectNotFound" prot="public">pann::Exception::ObjectNotFound</innerclass>
    <innerclass refid="classpann_1_1Exception_1_1ElementExists" prot="public">pann::Exception::ElementExists</innerclass>
    <innerclass refid="classpann_1_1Exception_1_1MultipleOccurance" prot="public">pann::Exception::MultipleOccurance</innerclass>
    <innerclass refid="classpann_1_1Exception_1_1SizeMismatch" prot="public">pann::Exception::SizeMismatch</innerclass>
    <innerclass refid="classpann_1_1Exception_1_1RangeMismatch" prot="public">pann::Exception::RangeMismatch</innerclass>
    <innerclass refid="classpann_1_1Exception_1_1NotReady" prot="public">pann::Exception::NotReady</innerclass>
    <innerclass refid="classpann_1_1Exception_1_1FilesystemError" prot="public">pann::Exception::FilesystemError</innerclass>
    <innerclass refid="classpann_1_1Exception_1_1Unbelievable" prot="public">pann::Exception::Unbelievable</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepann_1_1Exception_14b0dd33bc7fedcb69df051d8fcc1142d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>E const &amp;</type>
        <definition>E const&amp; pann::Exception::operator&lt;&lt;</definition>
        <argsstring>(E &amp;_e, const T &amp;_value)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>E &amp;</type>
          <declname>_e</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>_value</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Exception.h" line="21" bodyfile="/home/booble/pann/trunk/src/pann/Core/Exception.h" bodystart="20" bodyend="25"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Use case: throw Exception::CoolException()&lt;&lt;&quot;This is exception; i = &quot;&lt;&lt;5&lt;&lt;std::endl; Don&apos;t forget to declare your CoolException, derived from <ref refid="classpann_1_1Exception_1_1Base" kindref="compound">Exception::Base</ref> </para>    </detaileddescription>
    <location file="/home/booble/pann/trunk/src/pann/Core/Exception.cpp" line="8"/>
  </compounddef>
</doxygen>
