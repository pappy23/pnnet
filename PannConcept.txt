abstract class Neuron 
{
    public:
        setInput(value)
        {
            //
        }

        connect(Neuron to, Direction in/out)
        {
        }

        getGUID()
        {
        }
}

class Net
{
    public:
        registerNeuron(Neuron n, Input? = False)
        {
            NeuronList.add(n)
            cache.drop()
        }

        connect(FromGUID, ToGUID)

        run(Direction, Runner) //некоторые Runner-ы могут требовать определенного Direction! Direction - необязательный параметр
        {
        }

        setInput()
        {
        }

        getOutput()
        {
        }

        get/setWorkThreadsCount()
        {
        }

    private:
        list <GUID, *Neuron> NeuronList;
        list <GUID, *Neuron> inputNeuronList;
        NetCache Cache;
}

class Runner(Neuron n)
{
}

