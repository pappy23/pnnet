== Че надо делать в первую очередь? ==
  * ~~После рефакторинга ядра нужно проверить все. Написать Unit-тесты и пр. Все ли деструкторы вызываются, нет ли зависших нейронов/линков, нет ли неоднозначностей с рекуррентными топологиями?~~

{{{
Проверил. Все деструкторы вовремя вызываются.
В принципе то что касается Core, полностью покрыто тестом TestNet. 
Все остальное вроде как тоже неплохо покрывается с помощью других тестов. 
Не думаю что целесообразно писать унылые юнит-тесты, что бы тестить класс с двумя методами.
Прогнал тестовые программы через valgrind - никаких проблем. 
Обнаружены только проблемы с производительностью. Но это уже совсем другая история.
Рекуррентные топологии поддерживаются в полном объеме.
Ограничения топологии:
 - можно напутать с latency и тогда топология может неправильно строить кеш. В таких нештатных ситуациях алгоритм не тестировался.
 - если удалить нейрон, то указатель на него остается в кеше, так что реально нейрон удаляется только при перестройке кеша. Это не проблема, просто надо об этом помнить
 - если удалить нейроны так, что кусок топологии останется отрезан от входных нейронов,
то этот кусок останется висеть в памяти до завершения программы, потому как оставшиеся
нейроны будут продолжать ссылаться друг на друга. 
Не думаю что это такая уж большая проблема и ее нужно кидаться фиксить. 
Просто надо об этом помнить. 
weak_ptr внутри Link не предлагать.
}}}

  * Написать парсер PPM/PGM/PBM, убрать зависимости от boost::gil/libjpeg
  * Починить сериализацию так, что бы она не хавала столько стека. Пока что решение - юзать ulimit -s
  * Проверить качество алгоритма обучения, его соответствие теории, особенно с общими линками
  * Всякая всячина, помеченная в коде как TODO, FIXME
  * Проблемы с addConnection/delConnection. См. TODO коде
  * Ограничения волнового алгоритма. См. каменты в коде
  * читать CTest для юнит-тестирования
  * oprofile, valgrind - отловить тормоза и пр.
  * Doxygen
  * Описание в отдельном доке(статьи)