<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.6">
  <compounddef id="Net_8cpp" kind="file">
    <compoundname>Net.cpp</compoundname>
    <includes refid="Net_8h" local="yes">Net.h</includes>
    <incdepgraph>
      <node id="2053">
        <label>list</label>
      </node>
      <node id="2077">
        <label>Exception.h</label>
        <link refid="Exception_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
      </node>
      <node id="2055">
        <label>valarray</label>
      </node>
      <node id="2080">
        <label>ActivationFunction.h</label>
        <link refid="ActivationFunction_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2078" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
      </node>
      <node id="2071">
        <label>boost/serialization/map.hpp</label>
      </node>
      <node id="2059">
        <label>limits</label>
      </node>
      <node id="2073">
        <label>boost/serialization/vector.hpp</label>
      </node>
      <node id="2058">
        <label>iterator</label>
      </node>
      <node id="2070">
        <label>boost/archive/text_iarchive.hpp</label>
      </node>
      <node id="2084">
        <label>LearningHint.h</label>
        <link refid="LearningHint_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
      </node>
      <node id="2078">
        <label>Type.h</label>
        <link refid="Type_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
      </node>
      <node id="2081">
        <label>Link.h</label>
        <link refid="Link_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2082" relation="include">
        </childnode>
      </node>
      <node id="2083">
        <label>OpenGLHint.h</label>
        <link refid="OpenGLHint_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
      </node>
      <node id="2063">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="2060">
        <label>cmath</label>
      </node>
      <node id="2046">
        <label>pann/trunk/src/Core/Net.cpp</label>
        <link refid="Net.cpp"/>
        <childnode refid="2047" relation="include">
        </childnode>
      </node>
      <node id="2085">
        <label>Cache.h</label>
        <link refid="Cache_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2078" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
      </node>
      <node id="2067">
        <label>boost/archive/xml_oarchive.hpp</label>
      </node>
      <node id="2056">
        <label>string</label>
      </node>
      <node id="2052">
        <label>map</label>
      </node>
      <node id="2064">
        <label>boost/thread.hpp</label>
      </node>
      <node id="2047">
        <label>Net.h</label>
        <link refid="Net_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2079" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
        <childnode refid="2086" relation="include">
        </childnode>
        <childnode refid="2087" relation="include">
        </childnode>
      </node>
      <node id="2079">
        <label>Neuron.h</label>
        <link refid="Neuron_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2080" relation="include">
        </childnode>
        <childnode refid="2081" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
        <childnode refid="2084" relation="include">
        </childnode>
      </node>
      <node id="2051">
        <label>fstream</label>
      </node>
      <node id="2048">
        <label>Includes.h</label>
        <link refid="Includes_8h"/>
        <childnode refid="2049" relation="include">
        </childnode>
        <childnode refid="2050" relation="include">
        </childnode>
        <childnode refid="2051" relation="include">
        </childnode>
        <childnode refid="2052" relation="include">
        </childnode>
        <childnode refid="2053" relation="include">
        </childnode>
        <childnode refid="2054" relation="include">
        </childnode>
        <childnode refid="2055" relation="include">
        </childnode>
        <childnode refid="2056" relation="include">
        </childnode>
        <childnode refid="2057" relation="include">
        </childnode>
        <childnode refid="2058" relation="include">
        </childnode>
        <childnode refid="2059" relation="include">
        </childnode>
        <childnode refid="2060" relation="include">
        </childnode>
        <childnode refid="2061" relation="include">
        </childnode>
        <childnode refid="2062" relation="include">
        </childnode>
        <childnode refid="2063" relation="include">
        </childnode>
        <childnode refid="2064" relation="include">
        </childnode>
        <childnode refid="2065" relation="include">
        </childnode>
        <childnode refid="2066" relation="include">
        </childnode>
        <childnode refid="2067" relation="include">
        </childnode>
        <childnode refid="2068" relation="include">
        </childnode>
        <childnode refid="2069" relation="include">
        </childnode>
        <childnode refid="2070" relation="include">
        </childnode>
        <childnode refid="2071" relation="include">
        </childnode>
        <childnode refid="2072" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
      </node>
      <node id="2062">
        <label>boost/any.hpp</label>
      </node>
      <node id="2069">
        <label>boost/archive/text_oarchive.hpp</label>
      </node>
      <node id="2068">
        <label>boost/archive/xml_iarchive.hpp</label>
      </node>
      <node id="2074">
        <label>boost/serialization/version.hpp</label>
      </node>
      <node id="2075">
        <label>boost/progress.hpp</label>
      </node>
      <node id="2086">
        <label>Util.h</label>
        <link refid="Util_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
      </node>
      <node id="2054">
        <label>vector</label>
      </node>
      <node id="2076">
        <label>Object.h</label>
        <link refid="Object_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
        <childnode refid="2078" relation="include">
        </childnode>
      </node>
      <node id="2065">
        <label>boost/thread/barrier.hpp</label>
      </node>
      <node id="2050">
        <label>sstream</label>
      </node>
      <node id="2066">
        <label>boost/ref.hpp</label>
      </node>
      <node id="2061">
        <label>cstdlib</label>
      </node>
      <node id="2049">
        <label>iostream</label>
      </node>
      <node id="2072">
        <label>boost/serialization/list.hpp</label>
      </node>
      <node id="2057">
        <label>algorithm</label>
      </node>
      <node id="2087">
        <label>Runner.h</label>
        <link refid="Runner_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2078" relation="include">
        </childnode>
        <childnode refid="2079" relation="include">
        </childnode>
      </node>
      <node id="2082">
        <label>Weight.h</label>
        <link refid="Weight_8h"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacepann">pann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//Net.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Net_8h" kindref="compound">Net.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pann</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9" refid="classpann_1_1Net_1fc3d67838fb89d577abd01b9badbb1dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fc3d67838fb89d577abd01b9badbb1dc" kindref="member">Net::Net</ref>()</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fc3d67838fb89d577abd01b9badbb1dc" kindref="member">Net::Net</ref>(0);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//Net</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="classpann_1_1Net_148622ed4f082f1e13dc19a592ae99acc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Net::Net(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_threads)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1dbaf91489044bf1f9ce25436f6b35c09" kindref="member">lastNeuronId</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1076f5b0fd44096de50541c16fe5b97b3" kindref="member">lastWeightId</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1abb4547b6d16ac70f4470ed71357be6b" kindref="member">setThreadCount</ref>(_threads);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_11d95cc042ab3f71840416d7aebdb1def" kindref="member">learningHint</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" kindref="member">biasId</ref><sp/>=<sp/><ref refid="classpann_1_1Net_1875e333ddaaaf4d8cc332c4ff816c584" kindref="member">addNeuron</ref>(<ref refid="classpann_1_1ActivationFunction_1_1Linear_187335208832a774ba10892b4cfe97d09" kindref="member">ActivationFunction::Linear::Instance</ref>());</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_15f793f0f9a0462093637d8d7b5fe7b0f" kindref="member">addConnection</ref>(<ref refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" kindref="member">biasId</ref>,<sp/><ref refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" kindref="member">biasId</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//Net</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classpann_1_1Net_1ede55beb023c08142ca4b5974889d431" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1ede55beb023c08142ca4b5974889d431" kindref="member">Net::~Net</ref>()</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpann_1_1Net_11d95cc042ab3f71840416d7aebdb1def" kindref="member">learningHint</ref>)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_11d95cc042ab3f71840416d7aebdb1def" kindref="member">learningHint</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//~Net</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classpann_1_1Net_17367ddcfe022477e2e99aa2115580395" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_17367ddcfe022477e2e99aa2115580395" kindref="member">Net::getThreadCount</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="32"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" kindref="member">threadCount</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//getThreadCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classpann_1_1Net_1abb4547b6d16ac70f4470ed71357be6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1abb4547b6d16ac70f4470ed71357be6b" kindref="member">Net::setThreadCount</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_threads)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" kindref="member">touch</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_threads<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" kindref="member">threadCount</ref><sp/>=<sp/>boost::thread::hardware_concurrency();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_threads<sp/>&lt;<sp/>1<sp/>||<sp/>_threads<sp/>&gt;<sp/>64)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Exception_1_1RangeMismatch" kindref="compound" tooltip="Argument out of range.">Exception::RangeMismatch</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;Net::run():<sp/>currently<sp/>only<sp/>up<sp/>to<sp/>64<sp/>concurrent<sp/>threads<sp/>supported\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" kindref="member">threadCount</ref><sp/>=<sp/>_threads;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//setThreadCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classpann_1_1Net_1875e333ddaaaf4d8cc332c4ff816c584" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1875e333ddaaaf4d8cc332c4ff816c584" kindref="member">Net::addNeuron</ref>(<ref refid="classpann_1_1ActivationFunction_1_1Base" kindref="compound">ActivationFunction::Base</ref>*<sp/>_activationFunction)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" kindref="member">touch</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;NeuronIter,<sp/>bool&gt;<sp/>result<sp/>=<sp/><ref refid="classpann_1_1Net_127693544fbd9f6d5f74b57e9bbdc9a1d" kindref="member">neurons</ref>.insert(<sp/>pair&lt;unsigned,<sp/>Neuron&gt;(<ref refid="classpann_1_1Net_1dbaf91489044bf1f9ce25436f6b35c09" kindref="member">lastNeuronId</ref>,<sp/><ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref>(_activationFunction))<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!result.second)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Exception_1_1ElementExists" kindref="compound" tooltip="Trying to add already existent element.">Exception::ElementExists</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;Net::addNeuron():<sp/>insertion<sp/>of<sp/>neuron<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="classpann_1_1Net_1dbaf91489044bf1f9ce25436f6b35c09" kindref="member">lastNeuronId</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>failed\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_1dbaf91489044bf1f9ce25436f6b35c09" kindref="member">lastNeuronId</ref>++;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//addNeuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classpann_1_1Net_110f0471ee473197380146330d2ee0977" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_110f0471ee473197380146330d2ee0977" kindref="member">Net::addInputNeuron</ref>()</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>neuronId<sp/>=<sp/><ref refid="classpann_1_1Net_1875e333ddaaaf4d8cc332c4ff816c584" kindref="member">addNeuron</ref>(<ref refid="classpann_1_1ActivationFunction_1_1Linear_187335208832a774ba10892b4cfe97d09" kindref="member">ActivationFunction::Linear::Instance</ref>());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_18776411bdc6658b5d9c4febbae7a2b27" kindref="member">setNeuronRole</ref>(neuronId,<sp/><ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b49a06b112c565efc5f96e41f52d8deab" kindref="member">Net::InputNeuron</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>neuronId;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//addInputNeuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classpann_1_1Net_1a8b5f8bc26fca890ec606e9f5d6d5943" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1a8b5f8bc26fca890ec606e9f5d6d5943" kindref="member">Net::delNeuron</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_neuronId)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" kindref="member">touch</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>n<sp/>=<sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_neuronId);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Delete<sp/>all<sp/>connections<sp/>to/from<sp/>current<sp/>neuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list&lt;Link&gt;::iterator<sp/>link_iter<sp/>=<sp/>n-&gt;second.links.begin();<sp/>link_iter<sp/>!=<sp/>n-&gt;second.links.end();<sp/>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>will<sp/>delete<sp/>link,<sp/>so<sp/>we<sp/>can&apos;t<sp/>use<sp/>link_iter<sp/>to<sp/>get<sp/>access<sp/>to<sp/>Link<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>Link<sp/>attributes<sp/>unsignedo<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>to<sp/>=<sp/>link_iter-&gt;getToIter();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf055" kindref="member">Link::Direction</ref><sp/>dir<sp/>=<sp/>link_iter-&gt;getDirection();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Go<sp/>to<sp/>next<sp/>Link<sp/>(see<sp/>for<sp/>loop<sp/>-<sp/>it<sp/>is<sp/>without<sp/>++<sp/>statement)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link_iter++;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dir<sp/>==<sp/><ref refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0556b810850c72ab26c68965db2424df30c" kindref="member">Link::in</ref>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_185d99fb2b386c3f284c4dfa2473cebcb" kindref="member">delConnection</ref>(to-&gt;first,<sp/>n-&gt;first);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_185d99fb2b386c3f284c4dfa2473cebcb" kindref="member">delConnection</ref>(n-&gt;first,<sp/>to-&gt;first);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Actually<sp/>delete<sp/>Neuron<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="classpann_1_1Net_127693544fbd9f6d5f74b57e9bbdc9a1d" kindref="member">neurons</ref>.erase(_neuronId)<sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Exception_1_1ObjectNotFound" kindref="compound" tooltip="Reference to unexistent object was requested.">Exception::ObjectNotFound</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;Net::delNeuron():<sp/>can&apos;t<sp/>delete<sp/>neuron<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;_neuronId&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//delNeuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classpann_1_1Net_18776411bdc6658b5d9c4febbae7a2b27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_18776411bdc6658b5d9c4febbae7a2b27" kindref="member">Net::setNeuronRole</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_neuronId,<sp/><ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b" kindref="member">NeuronRole</ref><sp/>_newRole)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" kindref="member">touch</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>iter<sp/>=<sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_neuronId);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list&lt;<sp/>NeuronIter<sp/>&gt;::iterator<sp/>inputIter<sp/>=<sp/>find(<ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.begin(),<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.end(),<sp/>iter);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(_newRole)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b49a06b112c565efc5f96e41f52d8deab" kindref="member">InputNeuron</ref>:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputIter<sp/>==<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.end())</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.push_back(iter);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b8e605a7ac4e3dab20e7e4707188fa4ad" kindref="member">WorkNeuron</ref>:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputIter<sp/>!=<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.end())</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.erase(inputIter);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//setNeuronRole</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b" kindref="member">Net::NeuronRole</ref></highlight></codeline>
<codeline lineno="127" refid="classpann_1_1Net_171c72a853f6acb84389ad4e507c23f8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_171c72a853f6acb84389ad4e507c23f8c" kindref="member">Net::getNeuronRole</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_neuronId)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="128"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>0<sp/>-<sp/>work<sp/>neuron</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>1<sp/>-<sp/>work+input</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>role<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_168751290d27789ce6f303cf55ed505ed" kindref="member">ConstNeuronIter</ref><sp/>iter<sp/>=<sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_neuronId);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(find(<ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.begin(),<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.end(),<sp/>iter)<sp/>!=<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.end())</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>role+=1;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b" kindref="member">NeuronRole</ref>)role;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//getNeuronRole</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classpann_1_1Net_15f793f0f9a0462093637d8d7b5fe7b0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_15f793f0f9a0462093637d8d7b5fe7b0f" kindref="member">Net::addConnection</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_to,<sp/><ref refid="namespacepann_14509ba95a02d59e0a1cd5127e1c55988" kindref="member">Float</ref><sp/>_weightValue)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" kindref="member">touch</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>from<sp/>=<sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_from);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>to<sp/>=<sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_to);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;WeightIter,<sp/>bool&gt;<sp/>result<sp/>=<sp/><ref refid="classpann_1_1Net_112f8e99bf960304ccaee098263de6fa8" kindref="member">weights</ref>.insert(<sp/>pair&lt;unsigned,<sp/>Weight&gt;(<ref refid="classpann_1_1Net_1076f5b0fd44096de50541c16fe5b97b3" kindref="member">lastWeightId</ref>++,<sp/><ref refid="classpann_1_1Weight" kindref="compound">Weight</ref>(_weightValue))<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!result.second)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Exception_1_1ElementExists" kindref="compound" tooltip="Trying to add already existent element.">Exception::ElementExists</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;Net::addWeight():<sp/>insertion<sp/>of<sp/>new<sp/>weight<sp/>failed\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from-&gt;second.links.push_back(<sp/><ref refid="classpann_1_1Link" kindref="compound" tooltip="Link between two neurons.">Link</ref>(to,<sp/><ref refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0550735525ef5d9a47b94c4597e7c27e522" kindref="member">Link::out</ref>,<sp/>result.first)<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;second.links.push_back(<sp/><ref refid="classpann_1_1Link" kindref="compound" tooltip="Link between two neurons.">Link</ref>(from,<sp/><ref refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0556b810850c72ab26c68965db2424df30c" kindref="member">Link::in</ref>,<sp/>result.first)<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.first-&gt;second.usageCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//addConnection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classpann_1_1Net_185d99fb2b386c3f284c4dfa2473cebcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_185d99fb2b386c3f284c4dfa2473cebcb" kindref="member">Net::delConnection</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_to)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" kindref="member">touch</ref>();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>from_niter<sp/>=<sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_from);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>to_niter<sp/><sp/><sp/>=<sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_to);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Short<sp/>unsignedroduction:</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Neuron_from<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Neuron_to</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Link<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Link</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>to<sp/>=&gt;Neuron2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>=&gt;Neuron1</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>w<sp/><sp/>=&gt;weight1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/><sp/>=&gt;weight1</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>dir=&gt;out<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir=&gt;in</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Find<sp/>correspondent<sp/>Links<sp/>in<sp/>neurons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list&lt;Link&gt;::iterator<sp/>from_liter<sp/>=<sp/>from_niter-&gt;second.findLink(to_niter,<sp/><ref refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0550735525ef5d9a47b94c4597e7c27e522" kindref="member">Link::out</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list&lt;Link&gt;::iterator<sp/>to_liter<sp/>=<sp/>to_niter-&gt;second.findLink(from_niter,<sp/><ref refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0556b810850c72ab26c68965db2424df30c" kindref="member">Link::in</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//weight1<sp/>(see<sp/>picture)<sp/>must<sp/>be<sp/>common<sp/>for<sp/>both<sp/>Link<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from_liter-&gt;getWeightIter()<sp/>!=<sp/>to_liter-&gt;getWeightIter())</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Exception_1_1Unbelievable" kindref="compound" tooltip="It&amp;#39;s imposible in our universe!">Exception::Unbelievable</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;Net::delConnection():<sp/>symmetric<sp/>links<sp/>don&apos;t<sp/>share<sp/>weight\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>will<sp/>delete<sp/>Link<sp/>objects<sp/>and<sp/>iterators<sp/>to<sp/>common<sp/>weight<sp/>will<sp/>be<sp/>lost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_1984e6dfa15df19d238ee8f5792d0cefb" kindref="member">WeightIter</ref><sp/>w_iter<sp/>=<sp/>from_liter-&gt;getWeightIter();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Actually<sp/>delete<sp/>Link<sp/>objects<sp/>from<sp/>Neuron_to<sp/>and<sp/>Neuron_from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_niter-&gt;second.links.erase(from_liter);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_niter-&gt;second.links.erase(to_liter);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Delete<sp/>weight<sp/>object<sp/>if<sp/>it<sp/>no<sp/>more<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(w_iter-&gt;second.usageCount<sp/>-=<sp/>2)<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_112f8e99bf960304ccaee098263de6fa8" kindref="member">weights</ref>.erase(w_iter-&gt;first);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//delConnection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="classpann_1_1Net_160ede07661fe666b8923c50da10e1cb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_160ede07661fe666b8923c50da10e1cb2" kindref="member">Net::setNeuronOwner</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_neuron,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_owner)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_neuron)-&gt;second.setOwnerThread(_owner);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//setNeuronOwner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="classpann_1_1Net_132149f53c6ea0699bb83f3ab84a5556a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_132149f53c6ea0699bb83f3ab84a5556a" kindref="member">Net::getNeuronOwner</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_neuron)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="206"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_neuron)-&gt;second.getOwnerThread();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//getNeuronOwner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;</highlight></codeline>
<codeline lineno="211" refid="classpann_1_1Net_1710ba8f42654603324432e38a43aecb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1710ba8f42654603324432e38a43aecb1" kindref="member">Net::getInputMap</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="212"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;unsigned&gt;<sp/>result;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>iter,<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(iter-&gt;first);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//getInputMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_107e83643d8b5238cf322ebfd635cedda" kindref="member">Net::setInput</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>valarray&lt;Float&gt;&amp;<sp/>_input)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_input.size()<sp/>&lt;<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.size())</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Exception_1_1SizeMismatch" kindref="compound" tooltip="Count of elements mismatch.">Exception::SizeMismatch</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;setInput():<sp/>Supplied<sp/>input<sp/>size<sp/>is<sp/>smaller<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;then<sp/>number<sp/>of<sp/>input<sp/>neurons\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_input.size()<sp/>&gt;<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>.size())</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Exception_1_1Warning" kindref="compound" tooltip="Not critical. Simply instantiate.">Exception::Warning</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;setInput():<sp/>Input<sp/>size<sp/>is<sp/>bigger<sp/>then<sp/>input<sp/>neurons<sp/>count.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>getInputMap()<sp/>output\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>iter,<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref>)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;second.receptiveField<sp/>+=<sp/>_input[i++];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//setInput</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/><ref refid="namespacepann_14509ba95a02d59e0a1cd5127e1c55988" kindref="member">Float</ref>&gt;</highlight></codeline>
<codeline lineno="238" refid="classpann_1_1Net_181e50f71a229b3f94c4908b9ebb31970" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net" kindref="compound">Net</ref>::<ref refid="classpann_1_1Net_181e50f71a229b3f94c4908b9ebb31970" kindref="member">getOutput</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="239"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;unsigned,<sp/>Float&gt;<sp/>result;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1Cache_1d3b297e95711bf2b4e57a6437636bf7e" kindref="member">isOk</ref>()<sp/>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" kindref="member">regenerateCache</ref>();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" kindref="member">data</ref>.size()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<sp/><ref refid="classpann_1_1NetCache_126b4ca3dc6f2c0dac775cff86ef891af" kindref="member">NetCache::ThreadTaskType</ref>&amp;<sp/>task,<sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" kindref="member">data</ref>[<ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" kindref="member">data</ref>.size()<sp/>-<sp/>2])</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref>&amp;<sp/>iter,<sp/>task<sp/>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.insert(pair&lt;unsigned,<sp/>Float&gt;(iter-&gt;first,<sp/>iter-&gt;second.activationValue));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//getOutput</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_181e50f71a229b3f94c4908b9ebb31970" kindref="member">Net::getOutput</ref>(valarray&lt;Float&gt;&amp;<sp/>_output)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="257"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;unsigned,<sp/>Float&gt;<sp/>output<sp/>=<sp/><ref refid="classpann_1_1Net_181e50f71a229b3f94c4908b9ebb31970" kindref="member">getOutput</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_output.resize(output.size());</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(map&lt;unsigned,<sp/>Float&gt;::const_iterator<sp/>iter<sp/>=<sp/>output.begin();<sp/>iter<sp/>!=<sp/>output.end();<sp/>++iter)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_output[i++]<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//getOutput</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" kindref="member">Net::run</ref>(<ref refid="classpann_1_1Runner" kindref="compound">Runner</ref>*<sp/>_runner)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1Cache_1d3b297e95711bf2b4e57a6437636bf7e" kindref="member">isOk</ref>()<sp/>)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" kindref="member">regenerateCache</ref>();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::thread_group<sp/>threadPool;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::barrier<sp/>barrier(<ref refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" kindref="member">threadCount</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>thread<sp/>=<sp/>0;<sp/>thread<sp/>&lt;<sp/><ref refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" kindref="member">threadCount</ref>;<sp/>++thread)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threadPool.add_thread(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>boost::thread(<ref refid="classpann_1_1Net_17dc20310a87f924efe4c30c746b990bd" kindref="member">Net::threadBase</ref>,<sp/>_runner,<sp/>&amp;<ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>,<sp/>thread,<sp/>&amp;barrier)<sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wait<sp/>for<sp/>threads<sp/>to<sp/>finish</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threadPool.join_all();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1NetCache" kindref="compound">NetCache</ref>&amp;<sp/></highlight></codeline>
<codeline lineno="283" refid="classpann_1_1Net_1bf7a3f67a2d7ced86b8589d69477ed96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1bf7a3f67a2d7ced86b8589d69477ed96" kindref="member">Net::getCache</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="284"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//getCache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>map&lt;unsigned,<sp/>Neuron&gt;&amp;<sp/></highlight></codeline>
<codeline lineno="289" refid="classpann_1_1Net_120552ffce8f342bb6cf064180780a788" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_120552ffce8f342bb6cf064180780a788" kindref="member">Net::getNeurons</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="290"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_127693544fbd9f6d5f74b57e9bbdc9a1d" kindref="member">neurons</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//getNeurons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>map&lt;unsigned,<sp/>Weight&gt;&amp;</highlight></codeline>
<codeline lineno="295" refid="classpann_1_1Net_1f0276c2c5d68a2c9f7d7dfde5e1aca30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1f0276c2c5d68a2c9f7d7dfde5e1aca30" kindref="member">Net::getWeights</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="296"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_112f8e99bf960304ccaee098263de6fa8" kindref="member">weights</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//getWeights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="classpann_1_1Net_1179bae99437bcfc80e3477a9c01e0d62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1179bae99437bcfc80e3477a9c01e0d62" kindref="member">Net::getBiasId</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="302"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" kindref="member">biasId</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/></highlight><highlight class="comment">//getBiasId</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref></highlight></codeline>
<codeline lineno="307" refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">Net::findNeuron</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_neuronId)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>iter<sp/>=<sp/><ref refid="classpann_1_1Net_127693544fbd9f6d5f74b57e9bbdc9a1d" kindref="member">neurons</ref>.find(_neuronId);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpann_1_1Net_127693544fbd9f6d5f74b57e9bbdc9a1d" kindref="member">neurons</ref>.end()<sp/>==<sp/>iter)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Exception_1_1ObjectNotFound" kindref="compound" tooltip="Reference to unexistent object was requested.">Exception::ObjectNotFound</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;findNeuron():<sp/>Neuron<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;_neuronId&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//findNeuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepann_168751290d27789ce6f303cf55ed505ed" kindref="member">ConstNeuronIter</ref></highlight></codeline>
<codeline lineno="317" refid="classpann_1_1Net_1cf7cdb61950b1d55729ceb82407b414a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">Net::findNeuron</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_neuronId)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="318"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classpann_1_1Net" kindref="compound">Net</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;<ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(_neuronId);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//findNeuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1a2f1b31c8903d98b39035bfac5237f09" kindref="member">Net::formatFront</ref>(vector&lt;NeuronIter&gt;&amp;<sp/>_raw)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="324"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" kindref="member">data</ref>.push_back(<sp/><ref refid="classpann_1_1NetCache_125a54be011377684c4cd5876d0dc3ecf" kindref="member">NetCache::FrontType</ref>()<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1NetCache_125a54be011377684c4cd5876d0dc3ecf" kindref="member">NetCache::FrontType</ref>&amp;<sp/>tasks<sp/>=<sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" kindref="member">data</ref>[<ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" kindref="member">data</ref>.size()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" kindref="member">threadCount</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tasks.push_back(<sp/>vector&lt;NeuronIter&gt;()<sp/>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(_raw.begin(),<sp/>_raw.end(),<sp/><ref refid="structpann_1_1NeuronIterCompare" kindref="compound">NeuronIterCompare</ref>());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;NeuronIter&gt;::iterator<sp/>it<sp/>=<sp/>unique(_raw.begin(),<sp/>_raw.end(),<sp/><ref refid="structpann_1_1NeuronIterCompare_1320a830b78f3060579250e68952077ad" kindref="member">NeuronIterCompare::equal</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_raw.resize(<sp/>it<sp/>-<sp/>_raw.begin()<sp/>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_raw.size();<sp/>++i)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tasks[_raw[i]-&gt;second.getOwnerThread()<sp/>%<sp/>threadCount].push_back(_raw[i]);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//formatFront</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" kindref="member">Net::regenerateCache</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="341"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1NetCache_1cfa966e64695ce3e11a5cd5926e1680c" kindref="member">flush</ref>();<sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Here<sp/>we<sp/>will<sp/>place<sp/>neuron&apos;s<sp/>IDs<sp/>that<sp/>will<sp/>become<sp/>front,<sp/>with<sp/>duplicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;NeuronIter&gt;<sp/>rawFront;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Function<sp/>operates<sp/>with<sp/>&quot;hops&quot;<sp/>attribute<sp/>of<sp/>every<sp/>Neuron</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>build<sp/>adequate<sp/>cache.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Unfortunetly,<sp/>map&lt;unsigned,<sp/>Neuron&gt;::iterator<sp/>doesn&apos;t<sp/>have<sp/>operator&lt;<sp/>,<sp/>so</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>shold<sp/>write<sp/>own<sp/>comparison<sp/>class<sp/>for<sp/>hops&lt;&gt;.<sp/>I<sp/>placed<sp/>it<sp/>to<sp/>Utils.h</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;NeuronIter,<sp/>unsigned,<sp/>NeuronIterCompare&gt;<sp/>hops;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Put<sp/>inputNeurons<sp/>to<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>iter,<sp/><ref refid="classpann_1_1Net_1678cf8fa54d0a7b56de7864ea2925ce7" kindref="member">inputNeurons</ref><sp/>)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rawFront.push_back(iter);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hops[iter]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1a2f1b31c8903d98b39035bfac5237f09" kindref="member">formatFront</ref>(rawFront);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Bias<sp/>neuron<sp/>is<sp/>kind<sp/>of<sp/>input<sp/>neuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>biasIter<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classpann_1_1Net" kindref="compound">Net</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;<ref refid="classpann_1_1Net_1d54642461446c1f5aba34af3c01c290c" kindref="member">findNeuron</ref>(<ref refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" kindref="member">biasId</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" kindref="member">data</ref>[0][0].push_back(biasIter);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Cache<sp/>looks<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>vector&lt;FrontType&gt;<sp/>cache.data</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>|-(0)<sp/>vector&lt;ThreadTaskType&gt;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;--<sp/>*<sp/>front<sp/>pounsigneder<sp/>pounsigneds<sp/>to<sp/>this<sp/>vector</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>|-(1)<sp/>vector&lt;ThreadTaskType&gt;</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>|-(...)</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>|-(number_of_layers)<sp/>vector&lt;ThreadTaskType&gt;</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|-(0)<sp/>vector&lt;Neuron*&gt;<sp/>Target<sp/>neurons<sp/>for<sp/>thread1</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|-(1)<sp/>vector&lt;Neuron*&gt;<sp/>Target<sp/>neurons<sp/>for<sp/>thread2</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>At<sp/>this<sp/>pounsigned<sp/>cache.data(0)<sp/>is<sp/>the<sp/>only<sp/>record<sp/>and<sp/>it<sp/>contains<sp/>input<sp/>neurons</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>have<sp/>better<sp/>prepare<sp/>next<sp/>front</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>At<sp/>first<sp/>iteration,<sp/>if<sp/>you<sp/>remember,<sp/>vector&lt;unsigned&gt;<sp/>_raw<sp/>contains<sp/>unique<sp/>inputNeurons<sp/>indexes</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nCount<sp/>=<sp/>rawFront.size();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nCount;<sp/>++i)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pop_front<sp/>emulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepann_15b285d6cead198add4f14b5b5a0b97c1" kindref="member">NeuronIter</ref><sp/>currentNeuronIter<sp/>=<sp/>rawFront[0];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rawFront.erase(<sp/>rawFront.begin()<sp/>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ok,<sp/>we&apos;ve<sp/>got<sp/>cur_neuron.<sp/>We<sp/>will<sp/>iterate<sp/>through<sp/>his<sp/>Out<sp/>links</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>push_back<sp/>their<sp/>opposite<sp/>sides<sp/>to<sp/>rawFront</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<sp/><ref refid="classpann_1_1Link" kindref="compound" tooltip="Link between two neurons.">Link</ref>&amp;<sp/>link,<sp/>currentNeuronIter-&gt;second.links<sp/>)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Only<sp/>feedforward<sp/>links</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(link.<ref refid="classpann_1_1Link_1eab757727bb6ca0cad8edb46500c3897" kindref="member">getDirection</ref>()<sp/>==<sp/><ref refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0556b810850c72ab26c68965db2424df30c" kindref="member">Link::in</ref>)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Short<sp/>comment.<sp/>Consider<sp/>following<sp/>topology<sp/>(hops<sp/>are<sp/>in<sp/>brackets):</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>+(0)<sp/><sp/><sp/><sp/>&lt;--<sp/>output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+(0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+(3)<sp/><sp/><sp/><sp/>&lt;--<sp/>front(3)</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>/<sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>+(0)+(0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>======&gt;<sp/><sp/><sp/><sp/>+(0)+(0)<sp/><sp/>====&gt;<sp/><sp/>+(2)+(2)<sp/><sp/>&lt;--<sp/>front(2)</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>\<sp/>/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iteration1<sp/><sp/><sp/><sp/>\<sp/>/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/>\<sp/>/</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>+(0)<sp/><sp/>&lt;--<sp/>input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+(1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+(1)<sp/><sp/><sp/><sp/>&lt;--<sp/>front<sp/>on<sp/>iteration1</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>For<sp/>current<sp/>neuron<sp/>(C)<sp/>and<sp/>other<sp/>neuron<sp/>(T),<sp/>hops<sp/>might<sp/>be:</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>T<sp/>=<sp/>0<sp/><sp/>-<sp/>T-neuron<sp/>is<sp/>fresh.<sp/>We<sp/>will<sp/>set<sp/>T=C+1</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>T<sp/>=<sp/>N,<sp/>N<sp/>&lt;<sp/>C<sp/>-<sp/>it<sp/>is<sp/>recurrent<sp/>link.<sp/>Dont<sp/>touch<sp/>T<sp/>and<sp/>dont<sp/>place<sp/>it<sp/>unsignedo<sp/>rawFront</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>T<sp/>=<sp/>C<sp/><sp/>-<sp/>it<sp/>is<sp/>stupid<sp/>recursive<sp/>topology.<sp/>Currently<sp/>unsupported.<sp/>Raise<sp/>exception</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>T<sp/>=<sp/>C,<sp/>but<sp/>t=c<sp/><sp/>-<sp/>it<sp/>is<sp/>recurrent<sp/>link<sp/>over<sp/>1<sp/>neuron.<sp/>It<sp/>is<sp/>supported</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>T<sp/>=<sp/>C<sp/>+<sp/>1<sp/>-<sp/>T<sp/>already<sp/>hadled.<sp/>Silently<sp/>ignore<sp/>T.<sp/>We<sp/>can<sp/>add<sp/>T<sp/>to<sp/>rawFront</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>T<sp/>&gt;<sp/>C<sp/>+<sp/>1<sp/>-<sp/>impossible.<sp/>Somebody<sp/>changed<sp/>hops<sp/>by<sp/>hand<sp/>and<sp/>didn&apos;t<sp/>touch<sp/>cache<sp/>or</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>last<sp/>cache<sp/>generation<sp/>algorithm<sp/>didn&apos;t<sp/>set<sp/>neuron&apos;s<sp/>hops<sp/>to<sp/>zero</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Assume<sp/>that<sp/>when<sp/>cache<sp/>becomes<sp/>coherent,<sp/>all<sp/>neuron[hops]<sp/>vars<sp/>become<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hops[link.<ref refid="classpann_1_1Link_118a70d88ffa9fe441820c2d1c9d83579" kindref="member">getToIter</ref>()]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hops[link.<ref refid="classpann_1_1Link_118a70d88ffa9fe441820c2d1c9d83579" kindref="member">getToIter</ref>()]<sp/>=<sp/>hops[currentNeuronIter]<sp/>+<sp/>link.<ref refid="classpann_1_1Link_1282df22476d1056ecd371a2357f227c8" kindref="member">getLatency</ref>();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hops[link.<ref refid="classpann_1_1Link_118a70d88ffa9fe441820c2d1c9d83579" kindref="member">getToIter</ref>()]<sp/>==<sp/>hops[currentNeuronIter]<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rawFront.push_back(link.<ref refid="classpann_1_1Link_118a70d88ffa9fe441820c2d1c9d83579" kindref="member">getToIter</ref>());<sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hops[link.<ref refid="classpann_1_1Link_118a70d88ffa9fe441820c2d1c9d83579" kindref="member">getToIter</ref>()]<sp/>==<sp/>hops[currentNeuronIter]<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link.<ref refid="classpann_1_1Link_118a70d88ffa9fe441820c2d1c9d83579" kindref="member">getToIter</ref>()-&gt;first<sp/>!=<sp/>currentNeuronIter-&gt;first)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpann_1_1Exception_1_1Unbelievable" kindref="compound" tooltip="It&amp;#39;s imposible in our universe!">Exception::Unbelievable</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;Net::run():<sp/>cur_neuron.hops<sp/>==<sp/>to.hops.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>no<sp/>support<sp/>for<sp/>such<sp/>topologies<sp/>yet\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//BOOST_FOREACH(<sp/>Link<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//rawFront<sp/>iteration<sp/>(<sp/>Neuron<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//new<sp/>rawFront<sp/>formed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1a2f1b31c8903d98b39035bfac5237f09" kindref="member">formatFront</ref>(rawFront);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>rawFront.size()<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>rebuilded<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" kindref="member">cache</ref>.<ref refid="classpann_1_1Cache_12cb636d0dcacfc734a83e665bd1c6b69" kindref="member">fixed</ref>();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//regenerateCache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">};<sp/></highlight><highlight class="comment">//pann</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/booble/pann/trunk/src/Core/Net.cpp"/>
  </compounddef>
</doxygen>
