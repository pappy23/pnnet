<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.6">
  <compounddef id="classpann_1_1Net" kind="class" prot="public">
    <compoundname>pann::Net</compoundname>
    <basecompoundref refid="classpann_1_1Object" prot="public" virt="non-virtual">pann::Object</basecompoundref>
    <includes refid="Net_8h" local="no">Net.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classpann_1_1Net_12af39a29837c19f66e828589210c477b" prot="public" static="no">
        <name>NeuronRole</name>
        <enumvalue id="classpann_1_1Net_12af39a29837c19f66e828589210c477b8e605a7ac4e3dab20e7e4707188fa4ad" prot="public">
          <name>WorkNeuron</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classpann_1_1Net_12af39a29837c19f66e828589210c477b49a06b112c565efc5f96e41f52d8deab" prot="public">
          <name>InputNeuron</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="21" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="21" bodyend="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classpann_1_1Net_1884cab0d8add3ac395f3e9fc05352117" prot="public" static="no" mutable="no">
        <type><ref refid="classpann_1_1Attributes" kindref="compound">Attributes</ref></type>
        <definition>Attributes pann::Net::learningHint</definition>
        <argsstring></argsstring>
        <name>learningHint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="119" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="119" bodyend="-1"/>
        <referencedby refid="classpann_1_1Net_1efbc7b6a44fc533ee008ed8901fdb366" compoundref="Net_8h" startline="197" endline="207">serialize</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned pann::Net::threadCount</definition>
        <argsstring></argsstring>
        <name>threadCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="123" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="123" bodyend="-1"/>
        <referencedby refid="classpann_1_1Net_17367ddcfe022477e2e99aa2115580395" compoundref="Net_8cpp" startline="27" endline="30">getThreadCount</referencedby>
        <referencedby refid="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" compoundref="Net_8cpp" startline="160" endline="174">run</referencedby>
        <referencedby refid="classpann_1_1Net_1efbc7b6a44fc533ee008ed8901fdb366" compoundref="Net_8h" startline="197" endline="207">serialize</referencedby>
        <referencedby refid="classpann_1_1Net_1abb4547b6d16ac70f4470ed71357be6b" compoundref="Net_8cpp" startline="33" endline="47">setThreadCount</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classpann_1_1Net_1dbaf91489044bf1f9ce25436f6b35c09" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned pann::Net::lastNeuronId</definition>
        <argsstring></argsstring>
        <name>lastNeuronId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="124" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="124" bodyend="-1"/>
        <referencedby refid="classpann_1_1Net_14245470034fed308639db679cc959a80" compoundref="Net_8cpp" startline="211" endline="222">addNeuron</referencedby>
        <referencedby refid="classpann_1_1Net_148622ed4f082f1e13dc19a592ae99acc" compoundref="Net_8cpp" startline="14" endline="20">Net</referencedby>
        <referencedby refid="classpann_1_1Net_1efbc7b6a44fc533ee008ed8901fdb366" compoundref="Net_8h" startline="197" endline="207">serialize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classpann_1_1Net_17d4b75a7b2f347dfae9873783995a031" prot="private" static="no" mutable="no">
        <type>std::map&lt; unsigned, <ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::map&lt;unsigned, Neuron*&gt; pann::Net::neurons</definition>
        <argsstring></argsstring>
        <name>neurons</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="125" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="125" bodyend="-1"/>
        <referencedby refid="classpann_1_1Net_14245470034fed308639db679cc959a80" compoundref="Net_8cpp" startline="211" endline="222">addNeuron</referencedby>
        <referencedby refid="classpann_1_1Net_1a8b5f8bc26fca890ec606e9f5d6d5943" compoundref="Net_8cpp" startline="65" endline="74">delNeuron</referencedby>
        <referencedby refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</referencedby>
        <referencedby refid="classpann_1_1Net_1fb4b451068cb8cc61ca154f2e7da5521" compoundref="Net_8cpp" startline="183" endline="186">getNeurons</referencedby>
        <referencedby refid="classpann_1_1Net_1efbc7b6a44fc533ee008ed8901fdb366" compoundref="Net_8h" startline="197" endline="207">serialize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classpann_1_1Net_1492456d4b645a1bbd82904131021ef9c" prot="private" static="no" mutable="no">
        <type>std::list&lt; <ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::list&lt;Neuron*&gt; pann::Net::inputNeurons</definition>
        <argsstring></argsstring>
        <name>inputNeurons</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="126" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="126" bodyend="-1"/>
        <referencedby refid="classpann_1_1Net_102a808ac0c1fb419fc982987bff8f9af" compoundref="Net_8cpp" startline="270" endline="282">getNeuronRole</referencedby>
        <referencedby refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" compoundref="Net_8cpp" startline="347" endline="451">regenerateCache</referencedby>
        <referencedby refid="classpann_1_1Net_1efbc7b6a44fc533ee008ed8901fdb366" compoundref="Net_8h" startline="197" endline="207">serialize</referencedby>
        <referencedby refid="classpann_1_1Net_13083da8b48eb6d04e79c86050c708312" compoundref="Net_8cpp" startline="250" endline="267">setNeuronRole</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned pann::Net::biasId</definition>
        <argsstring></argsstring>
        <name>biasId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="127" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="127" bodyend="-1"/>
        <referencedby refid="classpann_1_1Net_1179bae99437bcfc80e3477a9c01e0d62" compoundref="Net_8cpp" startline="189" endline="192">getBiasId</referencedby>
        <referencedby refid="classpann_1_1Net_148622ed4f082f1e13dc19a592ae99acc" compoundref="Net_8cpp" startline="14" endline="20">Net</referencedby>
        <referencedby refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" compoundref="Net_8cpp" startline="347" endline="451">regenerateCache</referencedby>
        <referencedby refid="classpann_1_1Net_1efbc7b6a44fc533ee008ed8901fdb366" compoundref="Net_8h" startline="197" endline="207">serialize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" prot="private" static="no" mutable="yes">
        <type><ref refid="classpann_1_1NetCache" kindref="compound">NetCache</ref></type>
        <definition>NetCache pann::Net::cache</definition>
        <argsstring></argsstring>
        <name>cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="128" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="128" bodyend="-1"/>
        <referencedby refid="classpann_1_1Net_18520f33a65cf6e31668d0fa44dfe6165" compoundref="Net_8cpp" startline="285" endline="293">addConnection</referencedby>
        <referencedby refid="classpann_1_1Net_14245470034fed308639db679cc959a80" compoundref="Net_8cpp" startline="211" endline="222">addNeuron</referencedby>
        <referencedby refid="classpann_1_1Net_13af6a3cb55eec4e7fa254d980705140c" compoundref="Net_8cpp" startline="296" endline="325">delConnection</referencedby>
        <referencedby refid="classpann_1_1Net_104e1e3370fadc8c678a94540b2b25fca" compoundref="Net_8cpp" startline="225" endline="247">delNeuron</referencedby>
        <referencedby refid="classpann_1_1Net_1bf7a3f67a2d7ced86b8589d69477ed96" compoundref="Net_8cpp" startline="177" endline="180">getCache</referencedby>
        <referencedby refid="classpann_1_1Net_181e50f71a229b3f94c4908b9ebb31970" compoundref="Net_8cpp" startline="130" endline="146">getOutput</referencedby>
        <referencedby refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" compoundref="Net_8cpp" startline="347" endline="451">regenerateCache</referencedby>
        <referencedby refid="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" compoundref="Net_8cpp" startline="160" endline="174">run</referencedby>
        <referencedby refid="classpann_1_1Net_1efbc7b6a44fc533ee008ed8901fdb366" compoundref="Net_8h" startline="197" endline="207">serialize</referencedby>
        <referencedby refid="classpann_1_1Net_13083da8b48eb6d04e79c86050c708312" compoundref="Net_8cpp" startline="250" endline="267">setNeuronRole</referencedby>
        <referencedby refid="classpann_1_1Net_1abb4547b6d16ac70f4470ed71357be6b" compoundref="Net_8cpp" startline="33" endline="47">setThreadCount</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classpann_1_1Net_1c98d07dd8f7b70e16ccb9a01abf56b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class boost::serialization::access</definition>
        <argsstring></argsstring>
        <name>boost::serialization::access</name>
        <reimplements refid="classpann_1_1Object_1c98d07dd8f7b70e16ccb9a01abf56b9c">boost::serialization::access</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="195" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpann_1_1Net_1fc3d67838fb89d577abd01b9badbb1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pann::Net::Net</definition>
        <argsstring>()</argsstring>
        <name>Net</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Creates empty net and sets threadCount to hardware specific number (depends on available processors) Although creates bias neuron </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="31" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="9" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_148622ed4f082f1e13dc19a592ae99acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pann::Net::Net</definition>
        <argsstring>(unsigned _threads)</argsstring>
        <name>Net</name>
        <param>
          <type>unsigned</type>
          <declname>_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as above, but threadCount is set to <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_threads</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="36" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="14" bodyend="20"/>
        <references refid="classpann_1_1Net_15f793f0f9a0462093637d8d7b5fe7b0f" compoundref="Net_8cpp" startline="89" endline="92">addConnection</references>
        <references refid="classpann_1_1Net_1875e333ddaaaf4d8cc332c4ff816c584" compoundref="Net_8cpp" startline="50" endline="53">addNeuron</references>
        <references refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" compoundref="Net_8h" startline="127">biasId</references>
        <references refid="classpann_1_1ActivationFunction_1_1Linear_187335208832a774ba10892b4cfe97d09" compoundref="ActivationFunction_8h" startline="59" endline="65">pann::ActivationFunction::Linear::Instance</references>
        <references refid="classpann_1_1Net_1dbaf91489044bf1f9ce25436f6b35c09" compoundref="Net_8h" startline="124">lastNeuronId</references>
        <references refid="classpann_1_1Net_1abb4547b6d16ac70f4470ed71357be6b" compoundref="Net_8cpp" startline="33" endline="47">setThreadCount</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1ede55beb023c08142ca4b5974889d431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pann::Net::~Net</definition>
        <argsstring>()</argsstring>
        <name>~Net</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="37" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_17367ddcfe022477e2e99aa2115580395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned pann::Net::getThreadCount</definition>
        <argsstring>() const </argsstring>
        <name>getThreadCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manipulate threadCount </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="42" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="27" bodyend="30"/>
        <references refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" compoundref="Net_8h" startline="123">threadCount</references>
        <referencedby refid="classGLWidget_1f994f59226294ff949688422eb5cc3d3" compoundref="glwidget_8cpp" startline="157" endline="183">GLWidget::setInfoNet</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1abb4547b6d16ac70f4470ed71357be6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::setThreadCount</definition>
        <argsstring>(unsigned _threads)</argsstring>
        <name>setThreadCount</name>
        <param>
          <type>unsigned</type>
          <declname>_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="43" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="33" bodyend="47"/>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" compoundref="Net_8h" startline="123">threadCount</references>
        <references refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" compoundref="Cache_8cpp" startline="17" endline="20">pann::Cache::touch</references>
        <referencedby refid="TestNet_8cpp_1e66f6b31b5ad750f1fe042a706a4e3d4" compoundref="TestNet_8cpp" startline="12" endline="78">main</referencedby>
        <referencedby refid="classpann_1_1Net_148622ed4f082f1e13dc19a592ae99acc" compoundref="Net_8cpp" startline="14" endline="20">Net</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1875e333ddaaaf4d8cc332c4ff816c584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned pann::Net::addNeuron</definition>
        <argsstring>(ActivationFunction::Base *_activationFunction)</argsstring>
        <name>addNeuron</name>
        <param>
          <type><ref refid="classpann_1_1ActivationFunction_1_1Base" kindref="compound">ActivationFunction::Base</ref> *</type>
          <declname>_activationFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manipulate neurons in network Remark: addInputNeuron adds neuron with <ref refid="classpann_1_1ActivationFunction_1_1Linear" kindref="compound">ActivationFunction::Linear</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="50" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="50" bodyend="53"/>
        <referencedby refid="classpann_1_1Net_110f0471ee473197380146330d2ee0977" compoundref="Net_8cpp" startline="56" endline="62">addInputNeuron</referencedby>
        <referencedby refid="namespacepann_1_1NetworkModel_188223ff4c4a04103fcaefa1d899a2b42" compoundref="MultilayerPerceptron_8cpp" startline="11" endline="55">pann::NetworkModel::MultilayerPerceptron</referencedby>
        <referencedby refid="classpann_1_1Net_148622ed4f082f1e13dc19a592ae99acc" compoundref="Net_8cpp" startline="14" endline="20">Net</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_110f0471ee473197380146330d2ee0977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned pann::Net::addInputNeuron</definition>
        <argsstring>()</argsstring>
        <name>addInputNeuron</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="51" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="56" bodyend="62"/>
        <references refid="classpann_1_1Net_1875e333ddaaaf4d8cc332c4ff816c584" compoundref="Net_8cpp" startline="50" endline="53">addNeuron</references>
        <references refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b49a06b112c565efc5f96e41f52d8deab" compoundref="Net_8h" startline="21">InputNeuron</references>
        <references refid="classpann_1_1ActivationFunction_1_1Linear_187335208832a774ba10892b4cfe97d09" compoundref="ActivationFunction_8h" startline="59" endline="65">pann::ActivationFunction::Linear::Instance</references>
        <references refid="classpann_1_1Net_18776411bdc6658b5d9c4febbae7a2b27" compoundref="Net_8cpp" startline="77" endline="80">setNeuronRole</references>
        <referencedby refid="namespacepann_1_1NetworkModel_188223ff4c4a04103fcaefa1d899a2b42" compoundref="MultilayerPerceptron_8cpp" startline="11" endline="55">pann::NetworkModel::MultilayerPerceptron</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1a8b5f8bc26fca890ec606e9f5d6d5943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::delNeuron</definition>
        <argsstring>(unsigned _neuronId)</argsstring>
        <name>delNeuron</name>
        <param>
          <type>unsigned</type>
          <declname>_neuronId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="52" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="65" bodyend="74"/>
        <references refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</references>
        <references refid="classpann_1_1Net_17d4b75a7b2f347dfae9873783995a031" compoundref="Net_8h" startline="125">neurons</references>
        <references refid="classpann_1_1Net_18776411bdc6658b5d9c4febbae7a2b27" compoundref="Net_8cpp" startline="77" endline="80">setNeuronRole</references>
        <references refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b8e605a7ac4e3dab20e7e4707188fa4ad" compoundref="Net_8h" startline="21">WorkNeuron</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_18776411bdc6658b5d9c4febbae7a2b27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::setNeuronRole</definition>
        <argsstring>(unsigned _neuronId, NeuronRole _newRole)</argsstring>
        <name>setNeuronRole</name>
        <param>
          <type>unsigned</type>
          <declname>_neuronId</declname>
        </param>
        <param>
          <type><ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b" kindref="member">NeuronRole</ref></type>
          <declname>_newRole</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Can turn work neuron to be input and vice versa TODO: get rid of this functions, set threadCount as parametr to <ref refid="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" kindref="member">run()</ref> TODO: rewrite cache regeneration procedure to not rely on actual threadCount </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="59" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="77" bodyend="80"/>
        <references refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</references>
        <referencedby refid="classpann_1_1Net_110f0471ee473197380146330d2ee0977" compoundref="Net_8cpp" startline="56" endline="62">addInputNeuron</referencedby>
        <referencedby refid="classpann_1_1Net_1a8b5f8bc26fca890ec606e9f5d6d5943" compoundref="Net_8cpp" startline="65" endline="74">delNeuron</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_171c72a853f6acb84389ad4e507c23f8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b" kindref="member">NeuronRole</ref></type>
        <definition>Net::NeuronRole pann::Net::getNeuronRole</definition>
        <argsstring>(unsigned _neuronId) const </argsstring>
        <name>getNeuronRole</name>
        <param>
          <type>unsigned</type>
          <declname>_neuronId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="60" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="83" bodyend="86"/>
        <references refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_15f793f0f9a0462093637d8d7b5fe7b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::addConnection</definition>
        <argsstring>(unsigned _from, unsigned _to, Float _weightValue=1)</argsstring>
        <name>addConnection</name>
        <param>
          <type>unsigned</type>
          <declname>_from</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_to</declname>
        </param>
        <param>
          <type><ref refid="namespacepann_14509ba95a02d59e0a1cd5127e1c55988" kindref="member">Float</ref></type>
          <declname>_weightValue</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manage connections between neurons TODO: add shared connections for convolution networks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="66" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="89" bodyend="92"/>
        <references refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</references>
        <referencedby refid="namespacepann_1_1NetworkModel_188223ff4c4a04103fcaefa1d899a2b42" compoundref="MultilayerPerceptron_8cpp" startline="11" endline="55">pann::NetworkModel::MultilayerPerceptron</referencedby>
        <referencedby refid="classpann_1_1Net_148622ed4f082f1e13dc19a592ae99acc" compoundref="Net_8cpp" startline="14" endline="20">Net</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_185d99fb2b386c3f284c4dfa2473cebcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::delConnection</definition>
        <argsstring>(unsigned _from, unsigned _to)</argsstring>
        <name>delConnection</name>
        <param>
          <type>unsigned</type>
          <declname>_from</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="67" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="95" bodyend="98"/>
        <references refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</references>
        <referencedby refid="classpann_1_1Net_104e1e3370fadc8c678a94540b2b25fca" compoundref="Net_8cpp" startline="225" endline="247">delNeuron</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_160ede07661fe666b8923c50da10e1cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::setNeuronOwner</definition>
        <argsstring>(unsigned _neuron, unsigned _owner)</argsstring>
        <name>setNeuronOwner</name>
        <param>
          <type>unsigned</type>
          <declname>_neuron</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_owner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manage neuron owner thread It is usually much higher then threadCount </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="73" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="101" bodyend="104"/>
        <references refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</references>
        <references refid="classpann_1_1Neuron_12ec7496a4939390cc4e9c2b1b4ebfd8a" compoundref="Neuron_8cpp" startline="22" endline="28">pann::Neuron::setOwnerThread</references>
        <referencedby refid="namespacepann_1_1NetworkModel_188223ff4c4a04103fcaefa1d899a2b42" compoundref="MultilayerPerceptron_8cpp" startline="11" endline="55">pann::NetworkModel::MultilayerPerceptron</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_132149f53c6ea0699bb83f3ab84a5556a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned pann::Net::getNeuronOwner</definition>
        <argsstring>(unsigned _neuron) const </argsstring>
        <name>getNeuronOwner</name>
        <param>
          <type>unsigned</type>
          <declname>_neuron</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="74" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="107" bodyend="110"/>
        <references refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</references>
        <references refid="classpann_1_1Neuron_12a426e05cdb3fbd67635a4ba57ec2bbd" compoundref="Neuron_8cpp" startline="31" endline="34">pann::Neuron::getOwnerThread</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_107e83643d8b5238cf322ebfd635cedda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::setInput</definition>
        <argsstring>(const std::valarray&lt; Float &gt; &amp;_input)</argsstring>
        <name>setInput</name>
        <param>
          <type>const std::valarray&lt; <ref refid="namespacepann_14509ba95a02d59e0a1cd5127e1c55988" kindref="member">Float</ref> &gt; &amp;</type>
          <declname>_input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add values to input neurons receptive fields </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="79"/>
        <referencedby refid="TestNet_8cpp_1e66f6b31b5ad750f1fe042a706a4e3d4" compoundref="TestNet_8cpp" startline="12" endline="78">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_181e50f71a229b3f94c4908b9ebb31970" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; unsigned, <ref refid="namespacepann_14509ba95a02d59e0a1cd5127e1c55988" kindref="member">Float</ref> &gt;</type>
        <definition>map&lt; unsigned, Float &gt; pann::Net::getOutput</definition>
        <argsstring>() const </argsstring>
        <name>getOutput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns pairs&lt;input_neuron_id, it&apos;s output&gt; (only for neurons in last cache layer) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="86" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="130" bodyend="146"/>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" compoundref="NetCache_8h" startline="20">pann::NetCache::data</references>
        <references refid="classpann_1_1Cache_1d3b297e95711bf2b4e57a6437636bf7e" compoundref="Cache_8cpp" startline="29" endline="32">pann::Cache::isOk</references>
        <references refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" compoundref="Net_8cpp" startline="347" endline="451">regenerateCache</references>
        <referencedby refid="TestNet_8cpp_1e66f6b31b5ad750f1fe042a706a4e3d4" compoundref="TestNet_8cpp" startline="12" endline="78">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1bb24669b9fb9fecb3b5be29ce82a081a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::getOutput</definition>
        <argsstring>(std::valarray&lt; Float &gt; &amp;_output) const </argsstring>
        <name>getOutput</name>
        <param>
          <type>std::valarray&lt; <ref refid="namespacepann_14509ba95a02d59e0a1cd5127e1c55988" kindref="member">Float</ref> &gt; &amp;</type>
          <declname>_output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assign neurons outputs to specified by <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_output</parametername>
</parameternamelist>
<parameterdescription>
<para>valarray (it is slower then above version, but more useful) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="92"/>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::run</definition>
        <argsstring>(Runner *_runner)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classpann_1_1Runner" kindref="compound">Runner</ref> *</type>
          <declname>_runner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_runner</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classpann_1_1Runner" kindref="compound">Runner</ref> to each neuron, layer by layer Note: layers are computed automaticaly and stored in cache See <ref refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" kindref="member">regenerateCache()</ref> implementation for more details </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="100" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="160" bodyend="174"/>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1Cache_1d3b297e95711bf2b4e57a6437636bf7e" compoundref="Cache_8cpp" startline="29" endline="32">pann::Cache::isOk</references>
        <references refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" compoundref="Net_8cpp" startline="347" endline="451">regenerateCache</references>
        <references refid="classpann_1_1Net_17dc20310a87f924efe4c30c746b990bd" compoundref="Net_8h" startline="164" endline="191">threadBase</references>
        <references refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" compoundref="Net_8h" startline="123">threadCount</references>
        <referencedby refid="TestNet_8cpp_1e66f6b31b5ad750f1fe042a706a4e3d4" compoundref="TestNet_8cpp" startline="12" endline="78">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1bf7a3f67a2d7ced86b8589d69477ed96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classpann_1_1NetCache" kindref="compound">NetCache</ref> &amp;</type>
        <definition>const NetCache &amp; pann::Net::getCache</definition>
        <argsstring>() const </argsstring>
        <name>getCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Public interface to private attributes (they are used while training or painting net in pann_viewer) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="106" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="177" bodyend="180"/>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <referencedby refid="classGLWidget_161ec77b4004fb9516acb9869566f9095" compoundref="glwidget_8cpp" startline="27" endline="86">GLWidget::calcCoords</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1fb4b451068cb8cc61ca154f2e7da5521" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::map&lt; unsigned, <ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> * &gt; &amp;</type>
        <definition>const map&lt; unsigned, Neuron * &gt; &amp; pann::Net::getNeurons</definition>
        <argsstring>() const </argsstring>
        <name>getNeurons</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="107" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="183" bodyend="186"/>
        <references refid="classpann_1_1Net_17d4b75a7b2f347dfae9873783995a031" compoundref="Net_8h" startline="125">neurons</references>
        <referencedby refid="classGLWidget_1eab29fc071d92db4f5ecdc899d25c1e1" compoundref="glwidget_8cpp" startline="88" endline="139">GLWidget::drawNetModel</referencedby>
        <referencedby refid="classGLWidget_1f994f59226294ff949688422eb5cc3d3" compoundref="glwidget_8cpp" startline="157" endline="183">GLWidget::setInfoNet</referencedby>
        <referencedby refid="classGLWidget_19a07d44b5dc052a8652b88454f3cb481" compoundref="glwidget_8cpp" startline="141" endline="155">GLWidget::setInfoNeuron</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1179bae99437bcfc80e3477a9c01e0d62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned pann::Net::getBiasId</definition>
        <argsstring>() const </argsstring>
        <name>getBiasId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get ID of bias neuron Remark: bias neuron is implemented as work neuron, with self-recurrent connection (w=1), placed at first cache layer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="115" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="189" bodyend="192"/>
        <references refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" compoundref="Net_8h" startline="127">biasId</references>
        <referencedby refid="classGLWidget_1eab29fc071d92db4f5ecdc899d25c1e1" compoundref="glwidget_8cpp" startline="88" endline="139">GLWidget::drawNetModel</referencedby>
        <referencedby refid="namespacepann_1_1NetworkModel_188223ff4c4a04103fcaefa1d899a2b42" compoundref="MultilayerPerceptron_8cpp" startline="11" endline="55">pann::NetworkModel::MultilayerPerceptron</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * pann::Net::findNeuron</definition>
        <argsstring>(unsigned _neuronId)</argsstring>
        <name>findNeuron</name>
        <param>
          <type>unsigned</type>
          <declname>_neuronId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns Neuron* for corresponding neuron ID </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="135" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="195" bodyend="202"/>
        <references refid="classpann_1_1Net_17d4b75a7b2f347dfae9873783995a031" compoundref="Net_8h" startline="125">neurons</references>
        <referencedby refid="classpann_1_1Net_15f793f0f9a0462093637d8d7b5fe7b0f" compoundref="Net_8cpp" startline="89" endline="92">addConnection</referencedby>
        <referencedby refid="classpann_1_1Net_185d99fb2b386c3f284c4dfa2473cebcb" compoundref="Net_8cpp" startline="95" endline="98">delConnection</referencedby>
        <referencedby refid="classpann_1_1Net_1a8b5f8bc26fca890ec606e9f5d6d5943" compoundref="Net_8cpp" startline="65" endline="74">delNeuron</referencedby>
        <referencedby refid="classpann_1_1Net_1f1c5afc970cce2383733c92faf15335d" compoundref="Net_8cpp" startline="205" endline="208">findNeuron</referencedby>
        <referencedby refid="classpann_1_1Net_132149f53c6ea0699bb83f3ab84a5556a" compoundref="Net_8cpp" startline="107" endline="110">getNeuronOwner</referencedby>
        <referencedby refid="classpann_1_1Net_171c72a853f6acb84389ad4e507c23f8c" compoundref="Net_8cpp" startline="83" endline="86">getNeuronRole</referencedby>
        <referencedby refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" compoundref="Net_8cpp" startline="347" endline="451">regenerateCache</referencedby>
        <referencedby refid="classpann_1_1Net_160ede07661fe666b8923c50da10e1cb2" compoundref="Net_8cpp" startline="101" endline="104">setNeuronOwner</referencedby>
        <referencedby refid="classpann_1_1Net_18776411bdc6658b5d9c4febbae7a2b27" compoundref="Net_8cpp" startline="77" endline="80">setNeuronRole</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1f1c5afc970cce2383733c92faf15335d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
        <definition>const Neuron * pann::Net::findNeuron</definition>
        <argsstring>(unsigned _neuronId) const </argsstring>
        <name>findNeuron</name>
        <param>
          <type>unsigned</type>
          <declname>_neuronId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="136" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="205" bodyend="208"/>
        <references refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_14245470034fed308639db679cc959a80" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned pann::Net::addNeuron</definition>
        <argsstring>(Neuron *_neuron)</argsstring>
        <name>addNeuron</name>
        <param>
          <type><ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
          <declname>_neuron</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Real net modificators </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="141" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="211" bodyend="222"/>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1Net_1dbaf91489044bf1f9ce25436f6b35c09" compoundref="Net_8h" startline="124">lastNeuronId</references>
        <references refid="classpann_1_1Net_17d4b75a7b2f347dfae9873783995a031" compoundref="Net_8h" startline="125">neurons</references>
        <references refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" compoundref="Cache_8cpp" startline="17" endline="20">pann::Cache::touch</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_104e1e3370fadc8c678a94540b2b25fca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::delNeuron</definition>
        <argsstring>(Neuron *_neuron)</argsstring>
        <name>delNeuron</name>
        <param>
          <type><ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
          <declname>_neuron</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="142" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="225" bodyend="247"/>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1Net_185d99fb2b386c3f284c4dfa2473cebcb" compoundref="Net_8cpp" startline="95" endline="98">delConnection</references>
        <references refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0556b810850c72ab26c68965db2424df30c" compoundref="Link_8h" startline="22">pann::Link::in</references>
        <references refid="classpann_1_1Neuron_11ea45590be4c55659a776ff0acf2ac2c" compoundref="Neuron_8h" startline="32">pann::Neuron::links</references>
        <references refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" compoundref="Cache_8cpp" startline="17" endline="20">pann::Cache::touch</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_13083da8b48eb6d04e79c86050c708312" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::setNeuronRole</definition>
        <argsstring>(Neuron *_neuron, NeuronRole _newRole)</argsstring>
        <name>setNeuronRole</name>
        <param>
          <type><ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
          <declname>_neuron</declname>
        </param>
        <param>
          <type><ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b" kindref="member">NeuronRole</ref></type>
          <declname>_newRole</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="144" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="250" bodyend="267"/>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b49a06b112c565efc5f96e41f52d8deab" compoundref="Net_8h" startline="21">InputNeuron</references>
        <references refid="classpann_1_1Net_1492456d4b645a1bbd82904131021ef9c" compoundref="Net_8h" startline="126">inputNeurons</references>
        <references refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" compoundref="Cache_8cpp" startline="17" endline="20">pann::Cache::touch</references>
        <references refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b8e605a7ac4e3dab20e7e4707188fa4ad" compoundref="Net_8h" startline="21">WorkNeuron</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_102a808ac0c1fb419fc982987bff8f9af" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b" kindref="member">NeuronRole</ref></type>
        <definition>Net::NeuronRole pann::Net::getNeuronRole</definition>
        <argsstring>(const Neuron *_neuron) const </argsstring>
        <name>getNeuronRole</name>
        <param>
          <type>const <ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
          <declname>_neuron</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="145" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="270" bodyend="282"/>
        <references refid="classpann_1_1Net_1492456d4b645a1bbd82904131021ef9c" compoundref="Net_8h" startline="126">inputNeurons</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_18520f33a65cf6e31668d0fa44dfe6165" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::addConnection</definition>
        <argsstring>(Neuron *_from, Neuron *_to, Weight *_weight)</argsstring>
        <name>addConnection</name>
        <param>
          <type><ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
          <declname>_from</declname>
        </param>
        <param>
          <type><ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
          <declname>_to</declname>
        </param>
        <param>
          <type><ref refid="classpann_1_1Weight" kindref="compound">Weight</ref> *</type>
          <declname>_weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="147" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="285" bodyend="293"/>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0556b810850c72ab26c68965db2424df30c" compoundref="Link_8h" startline="22">pann::Link::in</references>
        <references refid="classpann_1_1Neuron_11ea45590be4c55659a776ff0acf2ac2c" compoundref="Neuron_8h" startline="32">pann::Neuron::links</references>
        <references refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0550735525ef5d9a47b94c4597e7c27e522" compoundref="Link_8h" startline="22">pann::Link::out</references>
        <references refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" compoundref="Cache_8cpp" startline="17" endline="20">pann::Cache::touch</references>
        <references refid="classpann_1_1Weight_189c6c1790e89fd0f0d76371c9bd3c0cc" compoundref="Weight_8h" startline="29">pann::Weight::usageCount</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_13af6a3cb55eec4e7fa254d980705140c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::delConnection</definition>
        <argsstring>(Neuron *_from, Neuron *_to)</argsstring>
        <name>delConnection</name>
        <param>
          <type><ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
          <declname>_from</declname>
        </param>
        <param>
          <type><ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> *</type>
          <declname>_to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="148" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="296" bodyend="325"/>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1Neuron_1c38530608054d8bdb17d930a72b362bd" compoundref="Neuron_8cpp" startline="43" endline="62">pann::Neuron::findLink</references>
        <references refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0556b810850c72ab26c68965db2424df30c" compoundref="Link_8h" startline="22">pann::Link::in</references>
        <references refid="classpann_1_1Neuron_11ea45590be4c55659a776ff0acf2ac2c" compoundref="Neuron_8h" startline="32">pann::Neuron::links</references>
        <references refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0550735525ef5d9a47b94c4597e7c27e522" compoundref="Link_8h" startline="22">pann::Link::out</references>
        <references refid="classpann_1_1Cache_12f52dab8b0db5569fc22847ff332345a" compoundref="Cache_8cpp" startline="17" endline="20">pann::Cache::touch</references>
        <references refid="classpann_1_1Weight_189c6c1790e89fd0f0d76371c9bd3c0cc" compoundref="Weight_8h" startline="29">pann::Weight::usageCount</references>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1ab688b11e6e516aa926be5b412d490c3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::formatFront</definition>
        <argsstring>(std::vector&lt; Neuron * &gt; &amp;_raw) const </argsstring>
        <name>formatFront</name>
        <param>
          <type>std::vector&lt; <ref refid="classpann_1_1Neuron" kindref="compound">Neuron</ref> * &gt; &amp;</type>
          <declname>_raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper used by <ref refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" kindref="member">regenerateCache()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="153"/>
        <referencedby refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" compoundref="Net_8cpp" startline="347" endline="451">regenerateCache</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pann::Net::regenerateCache</definition>
        <argsstring>() const </argsstring>
        <name>regenerateCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function updates cache Be extremely careful! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="159" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.cpp" bodystart="347" bodyend="451"/>
        <references refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" compoundref="Net_8h" startline="127">biasId</references>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" compoundref="NetCache_8h" startline="20">pann::NetCache::data</references>
        <references refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" compoundref="Net_8cpp" startline="195" endline="202">findNeuron</references>
        <references refid="classpann_1_1Cache_12cb636d0dcacfc734a83e665bd1c6b69" compoundref="Cache_8cpp" startline="23" endline="26">pann::Cache::fixed</references>
        <references refid="classpann_1_1NetCache_1db49b27edd3dbae9338535c8aeeabde1" compoundref="NetCache_8cpp" startline="8" endline="12">pann::NetCache::flush</references>
        <references refid="classpann_1_1Net_1ab688b11e6e516aa926be5b412d490c3">formatFront</references>
        <references refid="classpann_1_1Link_187348d85a5295f03b9851b2da57800aa" compoundref="Link_8cpp" startline="32" endline="35">pann::Link::getDirection</references>
        <references refid="classpann_1_1Link_1282df22476d1056ecd371a2357f227c8" compoundref="Link_8cpp" startline="37" endline="40">pann::Link::getLatency</references>
        <references refid="classpann_1_1Link_17989e38d6778c229f4db756fe116cbd6" compoundref="Link_8cpp" startline="20" endline="23">pann::Link::getTo</references>
        <references refid="classpann_1_1Link_1843c5a79ffd161b67e1770f65eabf0556b810850c72ab26c68965db2424df30c" compoundref="Link_8h" startline="22">pann::Link::in</references>
        <references refid="classpann_1_1Net_1492456d4b645a1bbd82904131021ef9c" compoundref="Net_8h" startline="126">inputNeurons</references>
        <references refid="classpann_1_1Neuron_11ea45590be4c55659a776ff0acf2ac2c" compoundref="Neuron_8h" startline="32">pann::Neuron::links</references>
        <referencedby refid="classpann_1_1Net_181e50f71a229b3f94c4908b9ebb31970" compoundref="Net_8cpp" startline="130" endline="146">getOutput</referencedby>
        <referencedby refid="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" compoundref="Net_8cpp" startline="160" endline="174">run</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpann_1_1Net_1efbc7b6a44fc533ee008ed8901fdb366" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <declname>Archive</declname>
            <defname>Archive</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pann::Net::serialize</definition>
        <argsstring>(Archive &amp;ar, const unsigned int version)</argsstring>
        <name>serialize</name>
        <reimplements refid="classpann_1_1Object_113a234c0fcd5d32d341353f1b7b3c828">serialize</reimplements>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="198" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="197" bodyend="207"/>
        <references refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" compoundref="Net_8h" startline="127">biasId</references>
        <references refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" compoundref="Net_8h" startline="128">cache</references>
        <references refid="classpann_1_1Net_1492456d4b645a1bbd82904131021ef9c" compoundref="Net_8h" startline="126">inputNeurons</references>
        <references refid="classpann_1_1Net_1dbaf91489044bf1f9ce25436f6b35c09" compoundref="Net_8h" startline="124">lastNeuronId</references>
        <references refid="classpann_1_1Net_1884cab0d8add3ac395f3e9fc05352117" compoundref="Net_8h" startline="119">learningHint</references>
        <references refid="classpann_1_1Net_17d4b75a7b2f347dfae9873783995a031" compoundref="Net_8h" startline="125">neurons</references>
        <references refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" compoundref="Net_8h" startline="123">threadCount</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classpann_1_1Net_17dc20310a87f924efe4c30c746b990bd" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pann::Net::threadBase</definition>
        <argsstring>(Runner *_runner, NetCache *_cache, unsigned _cur_thread_no, boost::barrier *_barrier)</argsstring>
        <name>threadBase</name>
        <param>
          <type><ref refid="classpann_1_1Runner" kindref="compound">Runner</ref> *</type>
          <declname>_runner</declname>
        </param>
        <param>
          <type><ref refid="classpann_1_1NetCache" kindref="compound">NetCache</ref> *</type>
          <declname>_cache</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_cur_thread_no</declname>
        </param>
        <param>
          <type>boost::barrier *</type>
          <declname>_barrier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is executed by work thread, instantiated from <ref refid="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" kindref="member">run()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="165" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="164" bodyend="191"/>
        <references refid="namespacepann_134cfd8d9243a5183902a991ae1532e370ac5753feef303274f7d3d43a04753c3" compoundref="Runner_8h" startline="15">pann::BackwardRun</references>
        <references refid="classpann_1_1NetCache_1dd41e18c50e038ff9b9cbdf249913cec" compoundref="NetCache_8h" startline="20">pann::NetCache::data</references>
        <references refid="namespacepann_134cfd8d9243a5183902a991ae1532e3748f0cddd9d215fba8b09d2e19f2b2a75" compoundref="Runner_8h" startline="15">pann::ForwardRun</references>
        <references refid="classpann_1_1Runner_1658262373566e4be537caffbc35d8350">pann::Runner::getDirection</references>
        <references refid="classpann_1_1Runner_1881c47937a701cbdb6cfc82b6f13d001">pann::Runner::run</references>
        <referencedby refid="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" compoundref="Net_8cpp" startline="160" endline="174">run</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="276">
        <label>pann::Object</label>
        <link refid="classpann_1_1Object"/>
      </node>
      <node id="275">
        <label>pann::Net</label>
        <link refid="classpann_1_1Net"/>
        <childnode refid="276" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="278">
        <label>pann::Object</label>
        <link refid="classpann_1_1Object"/>
      </node>
      <node id="279">
        <label>pann::NetCache</label>
        <link refid="classpann_1_1NetCache"/>
        <childnode refid="280" relation="public-inheritance">
        </childnode>
      </node>
      <node id="277">
        <label>pann::Net</label>
        <link refid="classpann_1_1Net"/>
        <childnode refid="278" relation="public-inheritance">
        </childnode>
        <childnode refid="279" relation="usage">
          <edgelabel>cache</edgelabel>
        </childnode>
        <childnode refid="281" relation="usage">
          <edgelabel>learningHint</edgelabel>
        </childnode>
      </node>
      <node id="280">
        <label>pann::Cache</label>
        <link refid="classpann_1_1Cache"/>
        <childnode refid="278" relation="public-inheritance">
        </childnode>
      </node>
      <node id="281">
        <label>pann::Attributes</label>
        <link refid="classpann_1_1Attributes"/>
        <childnode refid="278" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/booble/pann/trunk/src/pann/Core/Net.h" line="18" bodyfile="/home/booble/pann/trunk/src/pann/Core/Net.h" bodystart="17" bodyend="208"/>
    <listofallmembers>
      <member refid="classpann_1_1Net_15f793f0f9a0462093637d8d7b5fe7b0f" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>addConnection</name></member>
      <member refid="classpann_1_1Net_18520f33a65cf6e31668d0fa44dfe6165" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>addConnection</name></member>
      <member refid="classpann_1_1Net_110f0471ee473197380146330d2ee0977" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>addInputNeuron</name></member>
      <member refid="classpann_1_1Net_1875e333ddaaaf4d8cc332c4ff816c584" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>addNeuron</name></member>
      <member refid="classpann_1_1Net_14245470034fed308639db679cc959a80" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>addNeuron</name></member>
      <member refid="classpann_1_1Net_1cb42333b0f655e2422a959045107ea60" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>biasId</name></member>
      <member refid="classpann_1_1Net_1c98d07dd8f7b70e16ccb9a01abf56b9c" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>boost::serialization::access</name></member>
      <member refid="classpann_1_1Net_1fb0c8aa932da540a9e1d907508cc00ff" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>cache</name></member>
      <member refid="classpann_1_1Net_185d99fb2b386c3f284c4dfa2473cebcb" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>delConnection</name></member>
      <member refid="classpann_1_1Net_13af6a3cb55eec4e7fa254d980705140c" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>delConnection</name></member>
      <member refid="classpann_1_1Net_1a8b5f8bc26fca890ec606e9f5d6d5943" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>delNeuron</name></member>
      <member refid="classpann_1_1Net_104e1e3370fadc8c678a94540b2b25fca" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>delNeuron</name></member>
      <member refid="classpann_1_1Net_1a27681fc7cf4be20ff2530c9f29598a2" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>findNeuron</name></member>
      <member refid="classpann_1_1Net_1f1c5afc970cce2383733c92faf15335d" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>findNeuron</name></member>
      <member refid="classpann_1_1Net_1ab688b11e6e516aa926be5b412d490c3" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>formatFront</name></member>
      <member refid="classpann_1_1Net_1179bae99437bcfc80e3477a9c01e0d62" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>getBiasId</name></member>
      <member refid="classpann_1_1Net_1bf7a3f67a2d7ced86b8589d69477ed96" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>getCache</name></member>
      <member refid="classpann_1_1Net_132149f53c6ea0699bb83f3ab84a5556a" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>getNeuronOwner</name></member>
      <member refid="classpann_1_1Net_171c72a853f6acb84389ad4e507c23f8c" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>getNeuronRole</name></member>
      <member refid="classpann_1_1Net_102a808ac0c1fb419fc982987bff8f9af" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>getNeuronRole</name></member>
      <member refid="classpann_1_1Net_1fb4b451068cb8cc61ca154f2e7da5521" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>getNeurons</name></member>
      <member refid="classpann_1_1Net_181e50f71a229b3f94c4908b9ebb31970" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>getOutput</name></member>
      <member refid="classpann_1_1Net_1bb24669b9fb9fecb3b5be29ce82a081a" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>getOutput</name></member>
      <member refid="classpann_1_1Net_17367ddcfe022477e2e99aa2115580395" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>getThreadCount</name></member>
      <member refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b49a06b112c565efc5f96e41f52d8deab" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>InputNeuron</name></member>
      <member refid="classpann_1_1Net_1492456d4b645a1bbd82904131021ef9c" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>inputNeurons</name></member>
      <member refid="classpann_1_1Net_1dbaf91489044bf1f9ce25436f6b35c09" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>lastNeuronId</name></member>
      <member refid="classpann_1_1Net_1884cab0d8add3ac395f3e9fc05352117" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>learningHint</name></member>
      <member refid="classpann_1_1Net_1fc3d67838fb89d577abd01b9badbb1dc" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>Net</name></member>
      <member refid="classpann_1_1Net_148622ed4f082f1e13dc19a592ae99acc" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>Net</name></member>
      <member refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>NeuronRole</name></member>
      <member refid="classpann_1_1Net_17d4b75a7b2f347dfae9873783995a031" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>neurons</name></member>
      <member refid="classpann_1_1Object_1e4157eda81e363f28504b4ec9d15e196" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>Object</name></member>
      <member refid="classpann_1_1Net_14293d1faa37e9e2bb73b0ebdaf4a6a9e" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>regenerateCache</name></member>
      <member refid="classpann_1_1Net_15da746a5bb40bceb85992f5a77d393e7" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>run</name></member>
      <member refid="classpann_1_1Net_1efbc7b6a44fc533ee008ed8901fdb366" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>serialize</name></member>
      <member refid="classpann_1_1Net_107e83643d8b5238cf322ebfd635cedda" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>setInput</name></member>
      <member refid="classpann_1_1Net_160ede07661fe666b8923c50da10e1cb2" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>setNeuronOwner</name></member>
      <member refid="classpann_1_1Net_18776411bdc6658b5d9c4febbae7a2b27" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>setNeuronRole</name></member>
      <member refid="classpann_1_1Net_13083da8b48eb6d04e79c86050c708312" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>setNeuronRole</name></member>
      <member refid="classpann_1_1Net_1abb4547b6d16ac70f4470ed71357be6b" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>setThreadCount</name></member>
      <member refid="classpann_1_1Net_17dc20310a87f924efe4c30c746b990bd" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>threadBase</name></member>
      <member refid="classpann_1_1Net_12d41b163ab3f2171150fe8486dae44c9" prot="private" virt="non-virtual"><scope>pann::Net</scope><name>threadCount</name></member>
      <member refid="classpann_1_1Net_12af39a29837c19f66e828589210c477b8e605a7ac4e3dab20e7e4707188fa4ad" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>WorkNeuron</name></member>
      <member refid="classpann_1_1Net_1ede55beb023c08142ca4b5974889d431" prot="public" virt="non-virtual"><scope>pann::Net</scope><name>~Net</name></member>
      <member refid="classpann_1_1Object_1461126af2f1a20fa24f1340f670c5733" prot="public" virt="virtual"><scope>pann::Net</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
